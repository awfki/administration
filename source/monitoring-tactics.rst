======================================
Infrastructure Monitoring for Everyone
======================================

Monitoring refers to the practice of collecting regular data regarding
your infrastructure in order to provide alerts both of unplanned
downtime, network intrusion, and resource saturation as well as
auditable records of the same and other crucial operational
data. Often this data is important for forensic investigations and in
determining the root cause of errors. Monitoring provides the basis
for the most objective analysis es in systems administration and IT in
general.

Collecting these data presents its own set of technological problems,
and unlike some domains, the general purpose monitoring tools require
a great deal of customization and configuration for nearly every kind
of deployment. At the same time most specialized monitoring tools only
collect certain types of data and thus need to be integrated into
general purpose systems. There are no easy answers to these issues.

This document provides an overview of the monitoring problem domain
and an introduction to the core strategies and technologies. After
reading this document, I hope that you will have a reasonable
understanding of the most important issues and concerns that face
monitoring administrators and users.

Technological Background
------------------------

Monitoring applications and services are very much like any other kind
of service or application in terms of reliability and redundancy
requirements. See ":doc:`high-availability`" for more background on
the trade offs between availability, performance, cost, and
operational requirements. In some cases, a highly available, highly
responsive monitoring system to track key production systems is
absolutely required, in many circumstances monitoring system have much
less significant requirements.

At the core, monitoring systems are simply tools that collect data
generated by or collected from an existing system and then condense
and correlate that data in a manner to maximize utility. Monitoring
and :term:`alerting <alert>` are often addressed together because
using the data collected by monitoring systems is one of the core
applications of monitoring. Fundamentally, collecting and aggregating
monitoring data is easy, interpreting the data and using monitoring
systems is a much more complex and difficult project.

Typically, there are two ways that monitoring systems collect data:
using ":term:`passive systems <passive monitoring>`," which observe
data created by the application or system under normal operation
(i.e. logfiles, output, or messages from the application itself,) and
simply aggregates and processes the data that your application is
already collecting. By contrast, ":term:` active systems <active
monitoring>` uses agents and tools that capture or through a
monitoring module integrated into the production system itself.

There advantages and disadvantages to both passive and active
monitoring methods, and the kind of monitoring tools and data
collection method you choose is very highly dependent upon the
applications and environment active in your deployment, the specific
needs, use patterns, and operational requirements. This is true of
most systems administration problems to some degree, but it is
particularly true of monitoring systems.

Key Concepts
~~~~~~~~~~~~

Consider the following concepts in monitoring administration.

.. glossary::
   :sorted:

   passive monitoring
      Monitoring systems that collect data by reading data already
      generated by the monitored system. Typically this data is taken
      from logs/"traps" or from messages sent by the monitored system
      to a passive data collection agent. The ":term:`syslog` system
      is an example of passive monitoring. Passive monitoring is
      significantly less resource intensive than other methods.

   active monitoring
      Monitoring systems that collect data by directly interacting
      with the monitored systems and recording the results or the
      response times. The impact of the monitoring tests need to be
      considered, as well as the utility of the test itself. Active
      tests can adversely impact the systems they monitor, and its
      important to ensure that active tests capture useful data on an
      ongoing basis. For example, agent that tests the response time
      on a production database system would be considered an active
      tool.

   hybrid monitoring
      There are a class of monitoring collectors that fall somewhere
      between an active tool and a passive tool, particularly
      depending on your perspective. ICMP pings, or sample page loads
      might fall into this category, but many may feel (strongly) that
      these hybrid methods are either active or passive. The final
      distinction is not particularly significant.

   alert
      A notification regarding an event captured by a monitoring
      system that is produced when a data stream exceeds a
      pre-configured :term:`threshold`. Alerts are often very
      configurable and allow a variety of operational
      configurations. Alerts can be sent to different tiers of
      administrators, different thresholds can trigger different kinds
      of alerts.

   threshold
      A configured setting outside of which administrators expect that
      a system cannot function. Thresholds must be "tuned," to prevent
      false positive events where the monitoring system detects or
      alerts following a benign or expected data fluctuation, or false
      negatives where the monitoring utility is not sensitive enough
      to determine that a real threshold has been met.

   false positive
      An event or :term:`alert` that lies beyond the monitoring
      :term:`threshold`, but does not indicate that there is an
      operational issue. Typically this is caused by too sensitive
      monitoring infrastructure or imporperly configure
      thresholds. Not only are false positives annoying, they decrease
      the effectiveness of other alerts because users are more likely
      to dismiss alerts that are true positives. At the same time,
      false negatives are a far more serious monitoring error.

   false negative
      An event or :term:`alert` that a monitoring system fails to
      detect. These are caused by tests that are not sensitive enough
      to deceit possible errors, tests which do not run at the right
      interval to detect errors of short duration. False negatives are
      very serious and significantly impact the utility of a
      monitoring system.

   syslog
      Refers the standard logging format that originated with early
      BSD Unix utilites (i.e. ``sendmail``) and was later made generic
      for tool all system logging. The syslog format was adopted by a
      number of tools for reporting and log analysis and was
      eventually standardized. These days, syslog is rather poorly
      utilized despite its ubiquity, with many applications using
      their own logging systems, or using the syslog and the syslog
      format in ways that go beyond the standard and intention of the
      system.

Deploying Monitoring
--------------------

Monitoring infrastructure should typically run as distinctly as
possible from production services. Monitoring should not itself create
a significant impact on the system that it's monitoring, and failure
of the monitored system should not cause a failure in the monitoring
system. Simple redundancy and automatic fail-over is nice in
monitoring systems, as it is important to "monitor the monitoring," or
ensure that an inoperative monitoring system doesn't generate
:term:`false positives <false positive>`.

Infrastructure Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Alerts and Notifications
~~~~~~~~~~~~~~~~~~~~~~~~

Monitoring Tools
----------------

This section provides a brief overview of a number of very basic open
source monitoring tools and attempts to catalog their functionality
and purpose.

.. glossary::
   :sorted:

   Munin
      Munin is a resource monitoring and data collection tool. It uses
      RRD to store and graph data. Munin can collect and display data
      from any kind of UNIX or UNIX-like host (including Mac OS X, and
      Linux.) Munin has no concept of ":term:`threshold`" or
      ":term:`alert`", but can interact with other systems to provide
      this functionality. Munin operates with a "master" daemon that
      runs on one system, and data collection nodes that must run on
      the monitored system. While the "master" node only needs to run
      on one system in an environment, all monitored systems must run
      the "munin-node" process. Munin, thus, is as a "*resource
      monitoring*" tool.

   Nagios
      Nagios a monitoring framework that provides a sophisticated
      :term:`alert`, notification, and data collection framework. With
      an extensive plugin framework, it's possible to use nagios to
      monitor virtually any kind of system or operation using either
      :term:`passive <passive monitoring>` or :term:`active <active
      monitoring>` techniques. Nagios has a primary monitoring node,
      that collects data from other agents and processes that run in a
      more distributed manner. Nagios, thus, is a "*generic monitoring
      and alert framework.*"

   Monit
      Monit monitors (and supervises) specific processes, for Unix and
      Linux systems. Where other tools can provide data to answer a
      variety of different kinds of questions, Monit simply answers
      the question, "is this process up." Monit works by directly
      spawning (as the `init` process does on most UNIX systems) the
      processes that it monitors, and is not distributed in normal
      operation. Such "*uptime monitoring*" is a very useful part of
      any deployment, but for critical infrastructure it's important
      to collect additional data and monitor for additional
      infrastructure concerns (i.e. capacity and utilization) as well
      as larger trends and correlations.

   Cacti
      Cacti is a network traffic monitoring tool built on top of
      RRD. While Cacti is primarily used for collecting network
      utilization data it can accept data by way of the SNMP
      protocol. Cacti focuses on collecting a large amount of data
      from a large number of hosts and aggregating that data into a
      single coherent interface. Cacti, thus, is a *data collection and
      aggregation framework*.

When choosing or deploying a monitoring solution, consider the
following factors.

- How does the platform collect data, and what impact does this
  collection method have on the performance of the monitored system?

- How many systems can the solution monitor, and what kinds of
  resources are required to support this?

- How much logical, physical, and/or network separation can the
  monitoring application get from the monitored application?

- Can the platform provide alerts and notifications or must it
  integrate with a second solution?

- What monitors the monitoring system?

- What kinds of issues and errors will the solution detect, and what
  kinds of situations is the solution unable to detect. (*Network
  related problems, for instance, are extremely difficult to detect
  and monitor because monitoring applications are themselves network
  dependent to some degree.*)

Appliances and Hosted Services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As in many domains, its possible to outsource monitoring to vendors
who provide monitoring solutions as hosted services or as drop/plug-in
appliances, in additional to conventional applications. While there
are advantages and disadvantages to these *and* to conventional
monitoring tools, outsourcing and "appliances" both release
administrators from the additional burden of administering monitoring
infrastructure and makes a certain amount of operational sense.

It makes sense to outsource monitoring for a number of reasons,
including:

- monitoring is mission critical, and if you're working in a smaller
  organization, you're probably not at expert at deploying monitoring
  tools, and you're not in the business of monitoring (probably.)

- monitoring infrastructure ought to be distinct from the systems that
  they monitor. This allows the monitoring to remain operational
  throughout various service interruptions. This seperation ought to
  cover both

  It's also important to manage the inf FIX ME

-


monitoring is such a critical part of any
production deployment *and* that the best monitoring systems are
separated from the systems they monitor both physically and
operationally.


Feedback Loops
--------------


Analytics
~~~~~~~~~

Automation
~~~~~~~~~~

Lessons for Cyborgs
-------------------
